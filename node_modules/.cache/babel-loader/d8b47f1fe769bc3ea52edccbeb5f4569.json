{"ast":null,"code":"var _jsxFileName = \"/Users/jennyhwang/Desktop/FormsValidation/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const enteredEmailIsValid = enteredEmail.trim() !== '';\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false; //Check if all inputs are valid, if so, set formIsValid to true.\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } //update the enteredName state when user inputs\n\n\n  const nameInputHandler = event => {\n    setEnteredName(event.target.value);\n  }; //updated the enteredEmail state when user inputs\n\n\n  const emailInputHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const onSubmitHandler = e => {\n    e.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    setEnteredName('');\n    setEnteredNameTouched(false);\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputBlurHandler = e => {\n    setEnteredNameTouched(true);\n  };\n\n  const emailBlurHandler = e => {\n    setEnteredEmailTouched(true);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: onSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputHandler,\n        onBlur: nameInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        onChange: emailInputHandler,\n        onBlur: emailBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"xbeuRHbUOIU2iL6nDkeVWcFbgvo=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","SimpleInput","props","enteredName","setEnteredName","enteredEmail","setEnteredEmail","enteredNameTouched","setEnteredNameTouched","enteredEmailTouched","setEnteredEmailTouched","enteredNameIsValid","trim","nameInputIsInvalid","enteredEmailIsValid","emailInputIsInvalid","formIsValid","nameInputHandler","event","target","value","emailInputHandler","onSubmitHandler","e","preventDefault","nameInputBlurHandler","emailBlurHandler","nameInputClasses","emailInputClasses"],"sources":["/Users/jennyhwang/Desktop/FormsValidation/src/components/SimpleInput.js"],"sourcesContent":["import { useState} from 'react';\n\n\n\nconst SimpleInput = (props) => {\n\n\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\nconst enteredNameIsValid = enteredName.trim() !== '';\nconst nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n\nconst enteredEmailIsValid = enteredEmail.trim() !== '';\nconst emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\nlet formIsValid = false;\n\n\n//Check if all inputs are valid, if so, set formIsValid to true.\nif (enteredNameIsValid && enteredEmailIsValid) {\n  formIsValid = true;\n}\n\n\n//update the enteredName state when user inputs\nconst nameInputHandler = event => {\n  setEnteredName(event.target.value);\n  }\n\n//updated the enteredEmail state when user inputs\n  const emailInputHandler = event => {\n    setEnteredEmail(event.target.value);\n    }\n\n\nconst onSubmitHandler = (e) => {\ne.preventDefault();\nsetEnteredNameTouched(true);\nsetEnteredEmailTouched(true);\n\nif (!enteredNameIsValid || !enteredEmailIsValid) {\n  return\n}\n\nsetEnteredName('');\nsetEnteredNameTouched(false);\nsetEnteredEmail('');\nsetEnteredEmailTouched(false);\n\n}\n\n\nconst nameInputBlurHandler = (e) => {\n  setEnteredNameTouched(true)\n\n}\n\nconst emailBlurHandler = (e) => {\n  setEnteredEmailTouched(true)\n}\n\n\nconst nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n\nconst emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n\n  return (\n    <form onSubmit={onSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input \n        type='text' id='name' \n        onChange={nameInputHandler}\n        onBlur={nameInputBlurHandler}/>\n    {nameInputIsInvalid && <p className=\"error-text\">Name must not be empty</p>}\n      </div>\n\n      <div className={emailInputClasses}>\n        <label htmlFor='email'>Your Email</label>\n        <input \n        type='text' id='email' \n        onChange={emailInputHandler}\n        onBlur={emailBlurHandler}/>\n    {emailInputIsInvalid && <p className=\"error-text\">Email must not be empty</p>}\n      </div>\n\n\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}