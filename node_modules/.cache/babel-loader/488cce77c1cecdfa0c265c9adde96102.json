{"ast":null,"code":"var _jsxFileName = \"/Users/jennyhwang/Desktop/FormsValidation/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport useInput from '../hooks/useInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredNameVal,\n    hasError: nameInputHasError,\n    valueHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler\n  } = useInput(value => value.trim() !== '');\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredEmailIsValid = enteredEmail.trim() !== '' && enteredEmail.length > 0 && enteredEmail.includes(\"@\");\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false; //Check if all inputs are valid, if so, set formIsValid to true.\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } //update the enteredName state when user inputs\n\n\n  const nameInputHandler = event => {\n    setEnteredName(event.target.value);\n  }; //updated the enteredEmail state when user inputs\n\n\n  const emailInputHandler = event => {\n    setEnteredEmail(event.target.value);\n  }; //ON SUBMIT\n\n\n  const onSubmitHandler = e => {\n    e.preventDefault(); //pressing submit button makes every input \"touched\"\n\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true); //If the entered name and email is invalid, dont submit anything\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    } //Restart all states.\n\n\n    setEnteredName('');\n    setEnteredNameTouched(false);\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  }; //When input is blurred, set touched to true.\n\n\n  const nameInputBlurHandler = e => {\n    setEnteredNameTouched(true);\n  };\n\n  const emailBlurHandler = e => {\n    setEnteredEmailTouched(true);\n  }; //toggle classes\n\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: onSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        onChange: emailInputHandler,\n        onBlur: emailBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Invalid Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"6rpvNmLm3FGgliI6MxnfP+sS3kQ=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useInput","SimpleInput","props","value","enteredNameVal","hasError","nameInputHasError","valueHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","trim","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredEmailIsValid","length","includes","emailInputIsInvalid","formIsValid","enteredNameIsValid","nameInputHandler","event","setEnteredName","target","emailInputHandler","onSubmitHandler","e","preventDefault","setEnteredNameTouched","nameInputBlurHandler","emailBlurHandler","nameInputClasses","nameInputIsInvalid","emailInputClasses","enteredName"],"sources":["/Users/jennyhwang/Desktop/FormsValidation/src/components/SimpleInput.js"],"sourcesContent":["import { useState} from 'react';\nimport useInput from '../hooks/useInput';\n\n\n\nconst SimpleInput = (props) => {\n\nconst { value: enteredNameVal, \n  hasError: nameInputHasError, \n  valueHandler: nameChangeHandler,\ninputBlurHandler: nameBlurHandler } = useInput(value => value.trim() !== '');\n\n\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n\n\nconst enteredEmailIsValid = (enteredEmail.trim() !== '') && (enteredEmail.length > 0) && (enteredEmail.includes(\"@\"));\nconst emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\nlet formIsValid = false;\n\n\n//Check if all inputs are valid, if so, set formIsValid to true.\nif (enteredNameIsValid && enteredEmailIsValid) {\n  formIsValid = true;\n}\n\n\n//update the enteredName state when user inputs\nconst nameInputHandler = event => {\n  setEnteredName(event.target.value);\n  }\n\n//updated the enteredEmail state when user inputs\n  const emailInputHandler = event => {\n    setEnteredEmail(event.target.value);\n    }\n\n\n    //ON SUBMIT\nconst onSubmitHandler = (e) => {\ne.preventDefault();\n\n//pressing submit button makes every input \"touched\"\nsetEnteredNameTouched(true);\nsetEnteredEmailTouched(true);\n\n\n//If the entered name and email is invalid, dont submit anything\nif (!enteredNameIsValid || !enteredEmailIsValid) {\n  return\n}\n\n\n//Restart all states.\nsetEnteredName('');\nsetEnteredNameTouched(false);\nsetEnteredEmail('');\nsetEnteredEmailTouched(false);\n\n}\n\n\n//When input is blurred, set touched to true.\nconst nameInputBlurHandler = (e) => {\n  setEnteredNameTouched(true)\n\n}\n\nconst emailBlurHandler = (e) => {\n  setEnteredEmailTouched(true)\n}\n\n//toggle classes\nconst nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n\nconst emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n\n  return (\n\n    <form onSubmit={onSubmitHandler}>\n\n  \n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input \n        type='text' id='name' \n        onChange={nameInputHandler}\n        onBlur={nameInputBlurHandler}\n        value={enteredName}/>\n    {nameInputIsInvalid && <p className=\"error-text\">Name must not be empty</p>}\n      </div>\n\n      <div className={emailInputClasses}>\n        <label htmlFor='email'>Your Email</label>\n        <input \n        type='text' id='email' \n        onChange={emailInputHandler}\n        onBlur={emailBlurHandler}\n        value={enteredEmail}/>\n    {emailInputIsInvalid && <p className=\"error-text\">Invalid Email</p>}\n      </div>\n\n\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}