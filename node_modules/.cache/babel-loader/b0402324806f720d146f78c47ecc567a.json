{"ast":null,"code":"var _jsxFileName = \"/Users/jennyhwang/Desktop/FormsValidation/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport useInput from '../hooks/useInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredNameVal,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '');\n  const {\n    value: enteredEmailVal,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput\n  } = useInput(value => value.includes(\"@\"));\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  let formIsValid = false; //Check if all inputs are valid, if so, set formIsValid to true.\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } //ON SUBMIT\n\n\n  const onSubmitHandler = e => {\n    e.preventDefault(); //If the entered name and email is invalid, dont submit anything\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    } //Restart all states.\n\n\n    resetNameInput();\n    resetEmailInput();\n  }; //toggle classes\n\n\n  const nameInputClasses = nameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputHasError ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: onSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredNameVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        onChange: emailChangeHandler,\n        onBlur: emailBlurHandler,\n        value: enteredEmailVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), emailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Invalid Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"BYIsqB7rLR5urLuqhJfBAnRXR6w=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useInput","SimpleInput","props","value","enteredNameVal","isValid","enteredNameIsValid","hasError","nameInputHasError","valueHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","reset","resetNameInput","trim","enteredEmailVal","enteredEmailIsValid","emailInputHasError","emailChangeHandler","emailBlurHandler","resetEmailInput","includes","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","formIsValid","onSubmitHandler","e","preventDefault","nameInputClasses","emailInputClasses"],"sources":["/Users/jennyhwang/Desktop/FormsValidation/src/components/SimpleInput.js"],"sourcesContent":["import { useState} from 'react';\nimport useInput from '../hooks/useInput';\n\n\n\nconst SimpleInput = (props) => {\n\nconst { value: enteredNameVal, \n  isValid: enteredNameIsValid,\n  hasError: nameInputHasError, \n  valueHandler: nameChangeHandler,\ninputBlurHandler: nameBlurHandler,\nreset: resetNameInput\n} = useInput(value => value.trim() !== '');\n\n\nconst { value: enteredEmailVal, \n  isValid: enteredEmailIsValid,\n  hasError: emailInputHasError, \n  valueHandler: emailChangeHandler,\ninputBlurHandler: emailBlurHandler,\nreset: resetEmailInput\n} = useInput(value => value.includes(\"@\"));\n\n\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n\n\n\nlet formIsValid = false;\n\n\n//Check if all inputs are valid, if so, set formIsValid to true.\nif (enteredNameIsValid && enteredEmailIsValid) {\n  formIsValid = true;\n}\n\n\n\n\n\n\n\n    //ON SUBMIT\nconst onSubmitHandler = (e) => {\ne.preventDefault();\n\n\n//If the entered name and email is invalid, dont submit anything\nif (!enteredNameIsValid || !enteredEmailIsValid) {\n  return\n}\n\n\n//Restart all states.\nresetNameInput();\n\nresetEmailInput();\n\n}\n\n\n\n\n//toggle classes\nconst nameInputClasses = nameInputHasError ? 'form-control invalid' : 'form-control';\n\nconst emailInputClasses = emailInputHasError ? 'form-control invalid' : 'form-control';\n\n  return (\n\n    <form onSubmit={onSubmitHandler}>\n\n  \n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input \n        type='text' id='name' \n        onChange={nameChangeHandler}\n        onBlur={nameBlurHandler}\n        value={enteredNameVal}/>\n    {nameInputHasError && <p className=\"error-text\">Name must not be empty</p>}\n      </div>\n\n      <div className={emailInputClasses}>\n        <label htmlFor='email'>Your Email</label>\n        <input \n        type='text' id='email' \n        onChange={emailChangeHandler}\n        onBlur={emailBlurHandler}\n        value={enteredEmailVal}/>\n    {emailInputHasError&& <p className=\"error-text\">Invalid Email</p>}\n      </div>\n\n\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAwB,OAAxB;AACA,OAAOC,QAAP,MAAqB,mBAArB;;;AAIA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAE/B,MAAM;IAAEC,KAAK,EAAEC,cAAT;IACJC,OAAO,EAAEC,kBADL;IAEJC,QAAQ,EAAEC,iBAFN;IAGJC,YAAY,EAAEC,iBAHV;IAINC,gBAAgB,EAAEC,eAJZ;IAKNC,KAAK,EAAEC;EALD,IAMFd,QAAQ,CAACG,KAAK,IAAIA,KAAK,CAACY,IAAN,OAAiB,EAA3B,CANZ;EASA,MAAM;IAAEZ,KAAK,EAAEa,eAAT;IACJX,OAAO,EAAEY,mBADL;IAEJV,QAAQ,EAAEW,kBAFN;IAGJT,YAAY,EAAEU,kBAHV;IAINR,gBAAgB,EAAES,gBAJZ;IAKNP,KAAK,EAAEQ;EALD,IAMFrB,QAAQ,CAACG,KAAK,IAAIA,KAAK,CAACmB,QAAN,CAAe,GAAf,CAAV,CANZ;EASE,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCzB,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAAC0B,mBAAD,EAAsBC,sBAAtB,IAAgD3B,QAAQ,CAAC,KAAD,CAA9D;EAKF,IAAI4B,WAAW,GAAG,KAAlB,CA1B+B,CA6B/B;;EACA,IAAIrB,kBAAkB,IAAIW,mBAA1B,EAA+C;IAC7CU,WAAW,GAAG,IAAd;EACD,CAhC8B,CAwC3B;;;EACJ,MAAMC,eAAe,GAAIC,CAAD,IAAO;IAC/BA,CAAC,CAACC,cAAF,GAD+B,CAI/B;;IACA,IAAI,CAACxB,kBAAD,IAAuB,CAACW,mBAA5B,EAAiD;MAC/C;IACD,CAP8B,CAU/B;;;IACAH,cAAc;IAEdO,eAAe;EAEd,CAfD,CAzC+B,CA6D/B;;;EACA,MAAMU,gBAAgB,GAAGvB,iBAAiB,GAAG,sBAAH,GAA4B,cAAtE;EAEA,MAAMwB,iBAAiB,GAAGd,kBAAkB,GAAG,sBAAH,GAA4B,cAAxE;EAEE,oBAEE;IAAM,QAAQ,EAAEU,eAAhB;IAAA,wBAGE;MAAK,SAAS,EAAEG,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACA,IAAI,EAAC,MADL;QACY,EAAE,EAAC,MADf;QAEA,QAAQ,EAAErB,iBAFV;QAGA,MAAM,EAAEE,eAHR;QAIA,KAAK,EAAER;MAJP;QAAA;QAAA;QAAA;MAAA,QAFF,EAODI,iBAAiB,iBAAI;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAPpB;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF,eAaE;MAAK,SAAS,EAAEwB,iBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,OAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACA,IAAI,EAAC,MADL;QACY,EAAE,EAAC,OADf;QAEA,QAAQ,EAAEb,kBAFV;QAGA,MAAM,EAAEC,gBAHR;QAIA,KAAK,EAAEJ;MAJP;QAAA;QAAA;QAAA;MAAA,QAFF,EAODE,kBAAkB,iBAAG;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAPpB;IAAA;MAAA;MAAA;MAAA;IAAA,QAbF,eAwBE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAQ,QAAQ,EAAE,CAACS,WAAnB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAxBF;EAAA;IAAA;IAAA;IAAA;EAAA,QAFF;AA+BD,CAjGD;;GAAM1B,W;UAQFD,Q,EASAA,Q;;;KAjBEC,W;AAmGN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}